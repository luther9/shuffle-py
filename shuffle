#!/usr/bin/env python3

# Copyright 2018-2019 Luther Thompson
# This program is licensed under CC-0.

from argparse import ArgumentParser
from dataclasses import dataclass
from functools import reduce
import itertools
from random import Random
import sys

parser = ArgumentParser(add_help=False)
parser.add_argument('-help', action='help')
parser.add_argument('-seed', type=int, help='Random number seed')
parser.add_argument(
    'uniques', type=int, help='Number of unique, unshuffled cards',
)
parser.add_argument(
    'identicals', nargs='*', type=int,
    help='Numbers of identical or pre-shuffled cards',
)


@dataclass(frozen=True)
class Streak:
    """Represents a set of cards with consecutive positions.

    position: The Streak's final position in the shuffled deck.
    len: The length of the Streak.
    """
    position: int
    len: int

    def target(self, median):
        """True if the streak belongs in pile B."""
        return self.position + self.len / 2 <= median

    def targetMatch(self, median, target):
        """Check whether this streak's target matches the given target."""
        return self.target(median) == target


def unaryIdGroup(position, len):
    """Return a set containing the Streak with the given arguments."""
    return frozenset((Streak(position, len),))


def firstTarget(pile, median):
    """Determine the first target when splitting this pile."""
    # Whether there is an odd number of mixed groups before the current one.
    mixed = False
    for group in pile:
        targets = frozenset(s.target(median) for s in group)
        if True not in targets:
            return mixed
        if False not in targets:
            return not mixed
        mixed = not mixed
    return False


def optionalItemTuple(container):
    """Return a tuple. If container is not empty, put it in the tuple."""
    return (container,) if container else ()


def getTransfer(hand, median):
    """Return a 3-tuple describing a transfer from the hand to a new pile.

    0: The target pile. False for A, True for B.
    1: The list of id groups that go to the target pile.
    2: The remaining hand.
    """
    target = firstTarget(hand, median)
    transfer = ()
    for i, group in enumerate(hand):
        transferHalf = frozenset(
            s for s in group if s.targetMatch(median, target)
        )
        handHalf = group - transferHalf
        if handHalf:
            return (
                target,
                transfer + optionalItemTuple(transferHalf),
                (handHalf,) + hand[i+1:],
            )
        transfer += group,
    return target, hand, ()


def findMatchingStreak(group, target):
    """If group contains a streak that would be continued by target, return
    group with that streak moved out to a second value. Otherwise, return None.
    """
    for streak in group:
        if streak.position + streak.len == target:
            return group.difference((streak,)), streak


def combineIdenticals(upper, lower):
    """Combine two homogeneous piles into one list.

    If possible, rearrange the cards to create a new streak between them.
    """
    for lowerStreak in lower:
        rearrangement = findMatchingStreak(upper, lowerStreak.position)
        if rearrangement:
            fixedUpper, last = rearrangement
            return (
                optionalItemTuple(fixedUpper)
                + (unaryIdGroup(last.position, last.len + lowerStreak.len),)
                + optionalItemTuple(lower.difference((lowerStreak,)))
            )
    return upper, lower


def combine(a, b):
    """Combine two card piles into a single tuple. a must not be empty."""
    return a[:-1] + combineIdenticals(a[-1], b[0]) + b[1:] if b else a


def pileToStreaks(pile):
    """Iterate through all streaks in pile."""
    return (s for g in pile for s in g)


def pileSize(pile):
    """Return the sum of the lengths of all streaks in pile."""
    return sum(s.len for s in pileToStreaks(pile))


def split(hand):
    """Guide the user to split the hand pile into two piles.

    Return the two new piles after the split. On EOF, return None.
    """
    median = min(c.position for c in pileToStreaks(hand)) + pileSize(hand) / 2
    piles = (), ()
    while hand:
        target, transfer, hand = getTransfer(hand, median)
        letter = 'B' if target else 'A'
        try:
            input(f'{pileSize(transfer)} to {letter}')
        except EOFError:
            return
        piles = tuple(
            pile if i != target else combine(transfer, pile)
            for i, pile in enumerate(piles)
        )
    return piles


def getStreaks(iterable):
    """Iterate through all streaks that can be formed from the numbers in a
    non-empty iterable.
    """
    positions = iter(sorted(iterable))
    position = last = next(positions)
    size = 1
    for p in positions:
        if last + 1 == p:
            size += 1
        else:
            yield Streak(position, size)
            position = p
            size = 1
        last = p
    yield Streak(position, size)


def idGroup(n, pool):
    """Make a set of streaks of n cards.

    Positions are taken from pool, which must be iterable.
    """
    return frozenset(getStreaks(itertools.islice(pool, n)))


def main(argv):
    args = parser.parse_args(argv)
    uniques = args.uniques
    identicals = args.identicals
    nCards = uniques + sum(identicals)
    # This gives us the position for each card.
    pool = iter(Random(args.seed).sample(range(nCards), nCards))
    piles = (
        reduce(
            lambda deck, g: combine(g, deck),
            (
                (idGroup(n, pool),)
                for n in itertools.chain(
                    itertools.repeat(1, uniques),
                    identicals,
                )
            ),
            (),
        ),
    )
    while piles:
        hand = piles[0]
        size = pileSize(hand)
        rest = piles[1:]
        if len(hand) < 2:
            print(f'Pile of {size} cards is shuffled.')
            piles = rest
        else:
            print(*(pileSize(pile) for pile in piles))
            newPiles = split(hand)
            # If the user hits Ctrl-D, exit.
            if not newPiles:
                print()
                return
            piles = newPiles + rest


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
